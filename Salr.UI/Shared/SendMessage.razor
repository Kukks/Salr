@using System.ComponentModel.DataAnnotations

@code {

    [Required]
    public string? NewChatMessage { get; set; }

    [Parameter]
    public EventCallback<string> OnSend { get; set; }

    private void OnSubmit()
    {
        OnSend.InvokeAsync(NewChatMessage);
        NewChatMessage = null;
        InvokeAsync(StateHasChanged);
    }

    private ValidationEditContext _validationEditContext;

    private async Task OnKeyPress(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await _validationEditContext.Submit();
        }
    }

    [Parameter]
    public string ReferencedEvent { get; set; }

    [Parameter]
    public EventCallback<string> ReferencedEventChanged { get; set; }

}

<MudGrid Spacing="0" Class="mx-0">

    @if (ReferencedEvent is not null)
    {
        <MudItem xs="12">
            <ReferencedEvent Event="@ReferencedEvent" AllowClear="true" OnClear="() => ReferencedEventChanged.InvokeAsync(null)"></ReferencedEvent>

        </MudItem>
    }

    <MudItem xs="12">
        <ValidationEditContext Model="this" @ref="_validationEditContext" OnValidSubmit="OnSubmit" style="width: 100%">
            <MudTextField @bind-Value="NewChatMessage"
                          For="() => NewChatMessage"
                          OnKeyPress="OnKeyPress"
                          Placeholder="Enter your message..."
                          AdornmentIcon="@Icons.Material.Outlined.Send"
                          Adornment="Adornment.End"
                          OnAdornmentClick="_validationEditContext.Submit"
                          Lines="3">
            </MudTextField>
        </ValidationEditContext>

    </MudItem>
</MudGrid>