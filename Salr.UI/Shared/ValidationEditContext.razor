@using System.Linq.Expressions
<EditForm EditContext="EditContext" OnSubmit="OnSubmit">
    <DataAnnotationsValidator/>
    @ChildContent
</EditForm>

@code {

    [Parameter]
    public object Model { get; set; }

    [Parameter]
    public Func<Task> Validate { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    public EditContext EditContext { get; set; }

    private void EditContextOnOnValidationRequested(object? sender, ValidationRequestedEventArgs e)
    {
        MessageStore.Clear();
    }

    private void EditContextOnOnFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        MessageStore.Clear(e.FieldIdentifier);
        EditContext.NotifyValidationStateChanged();
    }

    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    public EventCallback OnInvalidSubmit { get; set; }

    public ValidationMessageStore MessageStore { get; set; }

    public void NotifyFieldChanged(Expression<Func<object>> field)
    {
        EditContext.NotifyFieldChanged(FieldIdentifier.Create(field));
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        EditContext = new EditContext(Model);
        MessageStore = new ValidationMessageStore(EditContext);
        EditContext.OnFieldChanged += EditContextOnOnFieldChanged;
        EditContext.OnValidationRequested += EditContextOnOnValidationRequested;
    }

    private async Task OnSubmit(EditContext obj)
    {
        if(Validate is not null)
            await Validate.Invoke();
        if (EditContext.GetValidationMessages().Any())
        {
            await OnInvalidSubmit.InvokeAsync();
        }
        else
        {
            await OnValidSubmit.InvokeAsync();
        }
    }

    public bool Invalid => EditContext.GetValidationMessages().Any();

}