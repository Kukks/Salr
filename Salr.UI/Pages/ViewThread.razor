@page "/thread/{id}"
@layout FullLayout
@inject Db _db
@using NNostr.Client
@implements IAsyncDisposable
<MudAppBar Elevation="1">
    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@(_ => Layout.DrawerToggle())"/>
    <MudSpacer/>
    @if (!string.IsNullOrEmpty(Title))
    {
        <MudText>@Title</MudText>
        <MudSpacer/>
    }
    <MudToggleIconButton Toggled="@SavedThread"
                         Edge="Edge.End"
                         ToggledChanged="ToggleSave"
                         Icon="@Icons.Material.Filled.AlarmOff" Color="@Color.Info" Title="Follow"
                         ToggledIcon="@Icons.Material.Filled.AlarmOn" ToggledColor="@Color.Success" ToggledTitle="Unsave"/>
</MudAppBar>

<MudPaper id="unique_id_scroll_section"
          Style="overflow: auto;height: calc(100vh - var(--mud-appbar-height) - 128px);">
    @if (Events is null)
    {
        <MudSkeleton Animation="Animation.Wave"/>
    }
    else
    {
        <MudSpacer></MudSpacer>
        <ChatThread Events="Events" AllowReply="true" NestedMode="false" ParentEvent="@Id" 
            OnReply="s => ReferencedEventId = s"></ChatThread>
    }

    <MudScrollToTop TopOffset="64" Selector="#unique_id_scroll_section">
        <MudFab Color="Color.Tertiary" Icon="@Icons.Filled.ArrowCircleUp"/>
    </MudScrollToTop>
</MudPaper>
<style>

.chat-send-message, .chat-send-message .mud-toolbar.mud-toolbar-appbar{
    @if (ReferencedEventId is not null)
    {
        @("height: 210px;")
        
    }
    else
    {
        @("height: 128px;")
    }
        
    }

     .chat-send-message .mud-toolbar.mud-toolbar-appbar form {
    height: 128px;
    
        
    }
</style>
<MudAppBar Fixed="true" Bottom="true" DisableGutters="true" Class="chat-send-message">

    <SendMessage OnSend="ConstructEvent"  @bind-ReferencedEvent="@ReferencedEventId"></SendMessage>
</MudAppBar>


@code
{

    [CascadingParameter]
    public FullLayout Layout { get; set; }

    public class PageLinks
    {
        public static string ThreadLink(string id)
        {
            return $"thread/{id}";
        }
    }

    [Inject]
    public Db Db { get; set; }

    [Parameter]
    public string Id { get; set; }

    public string[] Events { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Db.Threads.TryGetValue(Id, out var title))
        {
            SavedThread = true;
            Title = title;
        }
        else
        {
            SavedThread = false;
            Title = Id;
        }
        ;
        await base.OnInitializedAsync();
        _filters = SalrDataExtensions.GetThreadFilters(Id);
        await Db.Subscribe("thread-toplevel", _filters);
        Db.EventsReceived += EventsReceived;

        Events = GetEvents();
    }

    public bool SavedThread { get; set; }

    public async Task ToggleSave(bool val)
    {
        if (!val)
        {
            Db.Threads.Remove(Id);
            SavedThread = false;
        }
        else
        {
            Db.Threads.TryAdd(Id, Title);
            SavedThread = true;
        }
        
    }

    public string Title { get; set; }

    private void EventsReceived(object? sender, (string subscriptionId, NostrEvent[] events, Uri known) e)
    {
        if (e.subscriptionId == "thread-toplevel")
        {
            var mainEvent = e.events.FirstOrDefault(evt => evt.Id == Id);
            if (mainEvent is not null)
            {
                Title = mainEvent.Content;
            }
            
            
            Events = GetEvents();
            InvokeAsync(StateHasChanged);
        }
    }

    private string[] GetEvents()
    {
        return Db.Events.Values.Filter(false, _filters)
            .OrderBy(e => e.CreatedAt)
            .Select(e => e.Id)
            .ToArray();
    }

    public async Task ConstructEvent(string message)
    {
        var evt = new NostrEvent
        {
            Content = message,
            CreatedAt = DateTimeOffset.UtcNow,
            Kind = 1,
            PublicKey = Db.PubKeyHex,
            Tags = new List<NostrEventTag>
            {
                new NostrEventTag
                {
                    TagIdentifier = "e",
                    Data = new List<string>
                    {
                        Id
                    }
                }
            }
        };
        if (ReferencedEventId is not null)
        {
            evt.Tags.Add( new NostrEventTag
            {
                TagIdentifier = "e",
                Data = new List<string>
                {
                    ReferencedEventId
                }
            });
        }
        evt.ComputeIdAndSign(Db.Key);
        await Db.SendEvent(evt);
        ReferencedEventId = null;
    }

    public async ValueTask DisposeAsync()
    {
        Db.EventsReceived -= EventsReceived;
        await Db.Unsubscribe("thread-toplevel");
    }

    private NostrSubscriptionFilter[] _filters;


    public string? ReferencedEventId { get; set; }
}