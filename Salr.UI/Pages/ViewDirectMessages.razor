@page "/dms/{pubkey}"
@layout FullLayout
@using NNostr.Client
@inject Db _db
@implements IAsyncDisposable

<MudAppBar Elevation="1">
    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@(_ => Layout.DrawerToggle())"/>
    <MudSpacer/>
    @if (!string.IsNullOrEmpty(Title))
    {
        <MudText>@Title</MudText>
        <MudSpacer/>
    }
</MudAppBar>

<MudPaper id="unique_id_scroll_section"
          Style="overflow: auto;height: calc(100vh - var(--mud-appbar-height) - 128px);">
    @if (Events is null)
    {
        <MudSkeleton Animation="Animation.Wave"/>
    }
    else
    {
        <ChatThread 
            Events="Events" 
            InlineReply="false"
            OnReply="s => ReferencedEventId = s"
            AllowReply="true" NestedMode="NestedMode" OnInlineReply="tuple => ConstructEvent(tuple.message, tuple.parentEventId)"></ChatThread>
    }

    <MudScrollToTop TopOffset="64" Selector="#unique_id_scroll_section">
        <MudFab Color="Color.Tertiary" Icon="@Icons.Filled.ArrowCircleUp"/>
    </MudScrollToTop>
</MudPaper>
<style>
    .chat-send-message, .chat-send-message .mud-toolbar.mud-toolbar-appbar, .chat-send-message .mud-toolbar.mud-toolbar-appbar form {
        height: 128px;
        
    }
</style>
<MudAppBar Fixed="true" Bottom="true" DisableGutters="true" Class="chat-send-message">

    <SendMessage OnSend="s => ConstructEvent(s)" @bind-ReferencedEvent="@ReferencedEventId"></SendMessage>
</MudAppBar>
@code
{

    [CascadingParameter]
    public FullLayout Layout { get; set; }

    public partial class PageLinks
    {
        public static string DirectMessageLink(string pubkey)
        {
            return $"dms/{pubkey}";
        }
    }

    [Inject]
    public Db Db { get; set; }

    [Parameter]
    public string Pubkey { get; set; }

    public HashSet<string>Events { get; set; }

    public bool NestedMode { get; set; } = true;
    protected override async Task OnInitializedAsync()
    {
        Title = $"Direct Message {Pubkey}";
        await base.OnInitializedAsync();
        _filters = SalrDataExtensions.GetDirectMessageThreadFilters(Pubkey);
        await Db.Subscribe("direct-dm", _filters);
        Db.EventsReceived += EventsReceived;

        Events = GetEvents(Db.Events.Values);
    }

    public string Title { get; set; }
    public string ReferencedEventId { get; set; }

    private void EventsReceived(object? sender, (string subscriptionId, NostrEvent[] events, Uri known) e)
    {
        if (e.subscriptionId == "direct-dm")
        {
            var filtered = GetEvents(e.events);
            foreach (var evt in filtered)
            {
                Events.Add(evt);
            }
            InvokeAsync(StateHasChanged);
        }
    }

    private HashSet<string> GetEvents(IEnumerable<NostrEvent> evts )
    {
        var res = evts.Filter(false, _filters)
            .Where(e => !NestedMode || !Db.DecryptedNIP4Content.ContainsKey(e.GetTaggedEvents().FirstOrDefault() ?? string.Empty))
            .OrderBy(e => e.CreatedAt);

        return res.Select(e => e.Id)
            .ToHashSet();

    }
    public async Task ConstructEvent(string message, string replyTo = null)
    {
        var evt = new NostrEvent()
        {
            Content = message,
            CreatedAt = DateTimeOffset.UtcNow,
            Kind = 4,
            PublicKey = Db.PubKeyHex,
            Tags = new List<NostrEventTag>()
            {
                new NostrEventTag()
                {
                    TagIdentifier = "p",
                    Data = new List<string>()
                    {
                        Pubkey
                    }
                }
            }
        };
        replyTo ??= ReferencedEventId;
        if (replyTo is not null)
        {
            evt.Tags.Add(new NostrEventTag()
            {
                TagIdentifier = "e",
                Data = new List<string>()
                {
                    replyTo
                }
            });
        }
        try
        {

            await evt.ComputeIdAndSign(Db.Key);
            await Db.SendEvent(evt);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
        ReferencedEventId = null;
    }

    public async ValueTask DisposeAsync()
    {
        Db.EventsReceived -= EventsReceived;
        await Db.Unsubscribe("direct-dm");
    }

    private NostrSubscriptionFilter[] _filters;

}