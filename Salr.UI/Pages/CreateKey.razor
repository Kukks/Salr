@page "/create-key"
@using NBitcoin.Secp256k1
@using System.Security.Cryptography
@using NNostr.Client
<MudContainer Class="mt-16" MaxWidth="MaxWidth.Medium">
    <MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true">Create or import your key</MudText>
    <ValidationEditContext Model="this" @ref="_validationEditContext" Validate="Validate" OnValidSubmit="Submit">

        @if (ShowPrivateKeyField)
        {
            <MudTextField
                @bind-Value="Key"
                HelperText="Private key in hex format"
                Variant="Variant.Filled"
                AdornmentIcon="@Icons.Material.Filled.Refresh"
                Adornment="Adornment.End"
                OnAdornmentClick="GenerateKey"
                For="() => Key"/>
            <MudErrorMessage For="() => Key"></MudErrorMessage>
            @if (!string.IsNullOrEmpty(PubKey))
            {
                <MudText>
                    Your pubkey is @PubKey
                </MudText>
            }

            <MudGrid Justify="Justify.Center">
                <MudItem>
                    <MudButton Size="Size.Large" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" Disabled="_validationEditContext.Invalid">Submit</MudButton>

                </MudItem>
            </MudGrid>
        }
        else
        {
            <MudGrid Justify="Justify.Center">
                <MudItem>
                    <MudButton Size="Size.Large" Variant="Variant.Filled" Color="Color.Primary" OnClick="GenerateKey">Generate</MudButton>
                    <MudButton Size="Size.Large" Variant="Variant.Filled" Color="Color.Secondary" OnClick="() => ShowPrivateKeyField = true">Import</MudButton>
                </MudItem>
            </MudGrid>
        }

    </ValidationEditContext>

</MudContainer>

@code {
    public partial class PageLinks
    {
        public static string CreateKey()
        {
            return $"create-key";
        }
    }
    public bool ShowPrivateKeyField { get; set; }


    private ValidationEditContext _validationEditContext;
    private string _key;

    [Inject]
    private Db Db { get; set; }

    [Inject]
    private NavigationManager NavigationManager { get; set; }

    private string Key
    {
        get => _key;
        set
        {
            PubKey = null;
            _key = value;
        }
    }

    public void GenerateKey()
    {
        if (!ECPrivKey.TryCreate(new ReadOnlySpan<byte>(RandomNumberGenerator.GetBytes(32)), out var key)) return;
        Key = key.ToHex();
        PubKey = key.CreateXOnlyPubKey().ToHex();
        ShowPrivateKeyField = true;
    }

    public string PubKey { get; set; }

    public Task Validate()
    {
        if (!string.IsNullOrEmpty(Key))
        {
            try
            {
                var key = Key.DecodHexData();
                if (NBitcoin.Secp256k1.ECPrivKey.TryCreate(key, out var privKey))
                {
                    PrivKey = privKey;
                }
                else
                {
                    _validationEditContext.MessageStore.Add(() => Key, "Key was an incorrect format.");
                }
            }
            catch (Exception e)
            {
                _validationEditContext.MessageStore.Add(() => Key, "Key was an incorrect format.");
            }
        }
        else
        {
            _validationEditContext.MessageStore.Add(() => Key, "Key was an incorrect format.");
        }
        return Task.CompletedTask;
    }

    public ECPrivKey PrivKey { get; set; }

    private void Submit()
    {
        Db.Key = PrivKey;
        Db.NIP4Authors.Add(Db.PubKeyHex);
        NavigationManager.NavigateTo("/");
    }

}