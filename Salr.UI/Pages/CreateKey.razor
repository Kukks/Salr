@page "/create-key"
@using NBitcoin.Secp256k1
@using System.Security.Cryptography
@using NNostr.Client
<h3>CreateKey</h3>
<EditForm Model="this" OnSubmit="Submit">

    <MudTextField @bind-Value="Key" Error="ErrorText != null" ErrorText="@ErrorText" HelperText="Private key in hex format" Variant="Variant.Filled" AdornmentIcon="@Icons.Material.Filled.Create" Adornment="Adornment.End" OnAdornmentClick="GenerateKey"/>
    <MudTextField @bind-Value="PubKey" ReadOnly="true" HelperText="public key" Variant="Variant.Filled"/>
    
    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="ErrorText != null" ButtonType="ButtonType.Submit">Save</MudButton>
</EditForm>

@code {


    [Inject]
    private Db Db { get; set; }
    [Inject]
    private NavigationManager NavigationManager { get; set; }

    private string ErrorText { get; set; }

    private string Key
    {
        get => _key;
        set

        {
            ErrorText = null;
            _key = value;
        }
    }

    public void GenerateKey()
    {
        if (ECPrivKey.TryCreate(new ReadOnlySpan<byte>(RandomNumberGenerator.GetBytes(32)), out var key))
        {
            Span<byte> derOutput = new Span<byte>(new byte[32]);
            key.WriteToSpan( derOutput);
            Key = Convert.ToHexString(derOutput);
            
            PubKey = key.CreateXOnlyPubKey().ToBytes().ToHex();
        }
    }

    public string PubKey { get; set; }

    public void Submit()
    {
        if (!string.IsNullOrEmpty(Key))
        {
            try
            {
                var key = Key.DecodHexData();
                if (NBitcoin.Secp256k1.ECPrivKey.TryCreate(key, out var privKey))
                {
                    Db.Key = privKey;
                    NavigationManager.NavigateTo("/");
                }
                else
                {
                    ErrorText = "Key was an incorrect format.";
                }
            }
            catch (Exception e)
            {
                ErrorText = "Key was an incorrect format.";
            }
        }
        else
        {
            ErrorText = "Key is required.";
        }
    }


    private string _key;
}