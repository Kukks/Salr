@page "/create-key"
@using NBitcoin.Secp256k1
@using System.Security.Cryptography
@using NNostr.Client
<MudContainer Class="mt-16" MaxWidth="MaxWidth.Medium">
    <MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true">Create or import your key</MudText>
    <ValidationEditContext Model="this" @ref="_validationEditContext" Validate="Validate" OnValidSubmit="Submit">
        <MudTextField
            @bind-Value="Key"
            HelperText="Private key in hex format"
            Variant="Variant.Filled"
            AdornmentIcon="@Icons.Material.Filled.Create"
            Adornment="Adornment.End"
            OnAdornmentClick="GenerateKey"
            For="() => Key"/>
        <MudErrorMessage For="() => Key"></MudErrorMessage>
        <MudTextField @bind-Value="PubKey" ReadOnly="true" HelperText="public key" Variant="Variant.Filled"/>
         <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto"  Disabled="_validationEditContext.Invalid">Submit</MudButton>
    </ValidationEditContext>

</MudContainer>

@code {

    private ValidationEditContext _validationEditContext;

    [Inject]
    private Db Db { get; set; }

    [Inject]
    private NavigationManager NavigationManager { get; set; }

    private string Key { get; set; }

    public void GenerateKey()
    {
        if (!ECPrivKey.TryCreate(new ReadOnlySpan<byte>(RandomNumberGenerator.GetBytes(32)), out var key)) return;
        Key = NostrExtensions.ToString(key);
        PubKey = key.CreateXOnlyPubKey().ToBytes().ToHex();
    }

    public string PubKey { get; set; }

    public Task Validate()
    {
        if (!string.IsNullOrEmpty(Key))
        {
            try
            {
                var key = Key.DecodHexData();
                if (NBitcoin.Secp256k1.ECPrivKey.TryCreate(key, out var privKey))
                {
                    PrivKey = privKey;
                }
                else
                {
                    _validationEditContext.MessageStore.Add(() => Key, "Key was an incorrect format.");
                }
            }
            catch (Exception e)
            {
                _validationEditContext.MessageStore.Add(() => Key, "Key was an incorrect format.");
            }
        }
        else
        {
            _validationEditContext.MessageStore.Add(() => Key, "Key was an incorrect format.");
        }
        return Task.CompletedTask;
    }

    public ECPrivKey PrivKey { get; set; }

    private void Submit()
    {
        Db.Key = PrivKey;
        NavigationManager.NavigateTo("/");
    }

}